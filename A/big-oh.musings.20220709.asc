Thinking about big-O cost of Aparecium

2022-07-09

[This seems to be a plausible way to start.  It illustrates just how
many layers there are in the onion, and it may start getting difficult
just about where I have left off for now.  But I think this is a
start.]

Take a concrete case.

To execute ap:parse-resource($I, $G), what is the cost k?

1 k( parse-resource($I + $G) ) =

    k(unparsed-text($I))
    + k(unparsed-text($G))
    + k(parse-string($I2, $G2))  // 2

Conjecture: unparsed-text() is O(n) in bytecount of result.

Conjecture: unparsed-text() is negligeable compared to parse-string,
in all strata.

2 k(parse-string($I, $G)) =

      k(compile-grammar-from-string($G)) // 3
    + k(parse-string-with-compiled-grammar($I, $G2)) // 4

3 k(compile-grammar-from-string($G)) = 

      k(parse-grammar-from-string($G)) // 5
    + k(gluschkov($G2)) // 6

4 k(parse-string-with-compiled-grammar($I, $CG))=

      k(grammar-ok($CG)) // 7
    + k(any-tree($I, $CG)) // 8
    
5 k(parse-grammar-from-string($G))

      k(doc($ap:ixml.gl.xml)) 
    + k(parse-string-with-compiled-grammar($G, $ixml.gl)) // 4'

Conjecture that doc() is linear in bytes of standard XML grammar.
(But is in any case out of my hands.)

6 k(gluschkov($G2)) = 

Conjecture: this is a depth-first traversal and the cost is O(n) for n
= number of symbols in G, â‰… number of XML elements in $G//* except
$G//comment.

7 k(grammar-ok($CG))

8 k(any-tree($I, $CG)) =

      k(earley-parse($I, $CG)) // 9

9 k(earley-parse($I, $CG)) =

      k(er:recognizeX($I, $CG))
    + k(epi:parse-forest-grammar(completions, closure, input))
    + k(epi:tree-from-pfg(pfg))


