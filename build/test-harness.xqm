module namespace t =
"http://blackmesatech.com/2022/iXML/test-harness";

declare namespace tc =
"https://github.com/cmsmcq/ixml-tests";

declare function t:run-tests(
  $catalog-uri as xs:string,
  $options as element(options)
) as element(tc:test-results) {

  let $catalog := try { 
    doc($catalog-uri)
  } catch err:FODC0002 {
    <no-such-catalog/>
  }

  return element tc:test-results {
        attribute name {
      'Test results for ' || $catalog/@name
    },
    attribute processor { "Aparecium" },
    attribute processor-version { "v0.1" },
    attribute catalog-uri { $catalog-uri },
    attribute catalog-date { ($catalog/@release-date, '??')[1] },
    attribute report-date { 
      current-dateTime()
    },

    element tc:description {
      element tc:p {
        text { "Test report generated by test-harness.xqm." }
      }
    },

        if ($catalog/self::no-such-catalog) then
      element tc:error {
        attribute id { "tc:tbd01" },
        element tc:p {
          text { "Nothing found at "},
          $catalog-uri,
          text { "." }
        }
      }
    else

    for $test-set in $catalog/*/*
        [self::tc:test-set or self::tc:test-set-ref]
    return t:run-test-set($test-set)
  }
};

declare function t:run-test-set(
  $test-set as element()
) as element() {
  t:run-test-set($test-set, (), ())
};
declare function t:run-test-set(
  $test-set as element(),
  $grammar as element()?,
  $uri-stack as xs:string*
) as element()+ {

  if ($test-set/self::tc:test-set-ref)
  then        let $uri0 := base-uri($test-set),
           $uri1 := string($test-set/@href),
           $uri2 := resolve-uri($uri1, $uri0),
	   $newcat := try {
             doc($uri2)
           } catch err:FODC0002 { 
             <no-such-test-set/> 
           }
       return if ($newcat/self::no-such-test-set) then
           element tc:error {
             attribute id { "tc:tbd02" },
             element tc:p {
               text { "Nothing found at "},
               $uri2,
               text { "." }
             }
           }
        else for $test-set 
             in $newcat/*/*
                [self::tc:test-set 
                or self::tc:test-set-ref]
             return t:run-test-set($test-set, $grammar, $uri-stack)

  else     element tc:test-set {
      $test-set/@*, 
      element tc:description {
        (: temporary stub :)
        element tc:p {
          text { "Place-holder: "
               || "Results from test set " },
          $test-set/@name/string(),
          text { " will go here." }
        }
      }
            let $new-grammar := if ($test-set/tc:ixml-grammar)
          then ap:compile-grammar-from-string(
              $test-set/tc:ixml-grammar/string()
          )
          else if ($test-set/tc:vxml-grammar)
          then ap:compile-grammar-from-xml(
              $test/set/tc:vxml-grammar[1]
          )
          else if ($test-set/tc:ixml-grammar-ref)
          then ap:compile-grammar-from-uri(
              $test-set/tc:ixml-grammar-ref/@href
          )
          else if ($test-set/tc:vxml-grammar-ref)
          then ap:compile-grammar-from-xml(
              let $uri0 := $test/set/tc:vxml-grammar-ref
                           /@href/string(),
                  $uri1 := base-uri($test-set),
                  $uri2 := resolve-uri($uri0, $uri1)
              return doc($uri2)
          )
          else ()
      let $grammar-test-result := if (exists($new-grammar))
              then <dummy-grammar-test-result/>
              else (),
          $grammar-test-ok := if (exists($new-grammar))
              then true() (: run test on $new-grammar :)
              else true(),
          $grammar := ($new-grammar, $grammar)[1]
      if ($test-set/tc:grammar-test)


      element tc:description {
        (: temporary stub :)
        element tc:p {
          text { "Place-holder: "
               || "Results from test set " },
          $test-set/@name/string(),
          text { " will go here." }
        }
      }


      if ($grammar-test-ok) then
            for $c in $test-set/*
          [self::tc:test-set 
          or self::tc:test-set-ref
          or self::tc:test-case]
      return if ($c/self::tc:test-set 
                or $c/self::tc:test-set-ref)
      then t:run-test-set($c, $grammar, $uri-stack)
      else if ($c/tc:test-case)
      then t:run-test-case($c, $grammar)
      else element tc:error {
        attribute id="tc:tbd03",
        text { "The laws of logic have been abrogated?" }
      }

      else (: no point trying to run tests :)
          ($grammar-test-result,
          element tc:description {
            element tc:p {
              test { "Grammar test failed, "
                  || "test cases and nested "
                  || "test sets skipped." }
            }
          })
    }

};





