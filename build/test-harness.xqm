module namespace t =
"http://blackmesatech.com/2022/iXML/test-harness";
declare namespace tc =
"https://github.com/cmsmcq/ixml-tests";
import module namespace ap =
"http://blackmesatech.com/2019/iXML/Aparecium"
at "Aparecium.xqm";


declare function t:run-tests(
  $catalog-uri as xs:string,
  $options as element(options)
) as element(tc:test-results) {

    let $catalog := try { 
    doc($catalog-uri)
  } catch err:FODC0002 {
    <no-such-catalog/>
  }

  return element tc:test-results {
        attribute name {
      'Test results for ' || $catalog/@name
    },
    attribute processor { "Aparecium" },
    attribute processor-version { "v0.1" },
    attribute catalog-uri { $catalog-uri },
    attribute catalog-date { ($catalog/@release-date, '??')[1] },
    attribute report-date { 
      current-dateTime()
    },

    element tc:description {
      element tc:p {
        text { "Test report generated by test-harness.xqm." }
      }
    },

        if ($catalog/self::no-such-catalog) then
      element tc:error {
        attribute id { "tc:tbd01" },
        element tc:p {
          text { "Nothing found at "},
          $catalog-uri,
          text { "." }
        }
      }
    else

    for $test-set in $catalog/*/*
        [self::tc:test-set or self::tc:test-set-ref]
    return t:run-test-set($test-set, (), $catalog-uri)
  }
};

declare function t:run-test-set(
  $test-set as element()
) as element() {
  t:run-test-set($test-set, (), ())
};
declare function t:run-test-set(
  $test-set as element(),
  $grammar as element()?,
  $uri-stack as xs:string*
) as element()+ {

  if ($test-set/self::tc:test-set-ref)
  then        let $uri0 := base-uri($test-set),
           $uri1 := string($test-set/@href),
           $uri2 := resolve-uri($uri1, $uri0),
	   $newcat := try {
             doc($uri2)
           } catch err:FODC0002 { 
             <no-such-test-set/> 
           }
       return if ($newcat/self::no-such-test-set) then
           element tc:error {
             attribute id { "tc:tbd02" },
             element tc:p {
               text { "Nothing found at "},
               $uri2,
               text { "." }
             }
           }
        else for $test-set 
             in $newcat/*/*
                [self::tc:test-set 
                or self::tc:test-set-ref]
             return t:run-test-set($test-set, 
                                   $grammar, 
                                   ($uri2, $uri-stack))

  else     element tc:test-set {
      $test-set/@*, 
      element tc:description {
        (: temporary stub :)
        element tc:p {
          text { "Place-holder: "
               || "Results from test set " },
          $test-set/@name/string(),
          text { " will go here." }
        }
      },
            let $new-grammar := if ($test-set/tc:ixml-grammar)
          then           try {
               ap:compile-grammar-from-string(
                 $test-set/tc:ixml-grammar/string()
               )
          } catch * {
               element tc:error {
                 attribute id { "t:tbd04" },
                 text { "ixml compilation failed" }
               }               
          }

          else if ($test-set/tc:vxml-grammar)
          then           try {
               ap:compile-grammar-from-xml(
                 $test-set/tc:vxml-grammar[1]/ixml
               ) 
          } catch * {
               element tc:error {
                 attribute id { "t:tbd05" },
                 text { "vxml compilation failed" }
               }               
          }

          else if ($test-set/tc:ixml-grammar-ref)
          then           let $uri0 := $test-set/tc:ixml-grammar-ref
                           /@href/string(),
              $uri1 := base-uri($test-set),
              $uri2 := resolve-uri($uri0, $uri1)
              return 
                if (unparsed-text-available($uri2))
                then try {
		       ap:compile-grammar-from-uri($uri2)
                     } catch * {
                       element tc:error {
                         attribute id { "t:tbd06" },
			 text { "ixml compilation failed" }
                       }
                     }
                else element tc:error {
                       attribute id { "t:tbd07" },
		       text { "external ixml not found" }
                     }

 
          else if ($test-set/tc:vxml-grammar-ref)
          then           let $uri0 := $test-set/tc:ixml-grammar-ref
                           /@href/string(),
              $uri1 := base-uri($test-set),
              $uri2 := resolve-uri($uri0, $uri1)
              return 
                if (unparsed-text-available($uri2))
                then try {
		       ap:compile-grammar-from-uri($uri2)
                     } catch * {
                       element tc:error {
                         attribute id { "t:tbd06" },
			 text { "ixml compilation failed" }
                       }
                     }
                else element tc:error {
                       attribute id { "t:tbd07" },
		       text { "external ixml not found" }
                     }


          else ()
      let $grammar-test-result := 
          if (exists($new-grammar)
             and exists($test-set/tc:grammar-test))
          then (: place holder :)
              let $gt := $test-set/tc:grammar-test
              return element tc:grammar-test-result {
                  (: temporary stub :)
                  attribute result { "pass" },
                  element tc:p {
                      text { "Place-holder: "
                          || "Results from test set " },
                      $test-set/@name/string(),
                      text { " will go here." }
                  }
              }

          else ()
      let $grammar := ($new-grammar, $grammar)[1]

      return (
        $grammar-test-result ,
        if (($grammar-test-result/@result = 'pass')
	   or empty($grammar-test-result)) 
        then (: run the tests, handle nested sets :)
	           for $c in $test-set/*
          [self::tc:test-set 
          or self::tc:test-set-ref
          or self::tc:test-case]
      return if ($c/self::tc:test-set 
                or $c/self::tc:test-set-ref)
      then t:run-test-set($c, $grammar, $uri-stack)
      else if ($c/self::tc:test-case)
      then t:run-test-case($c, $grammar)
      else element tc:error {
        attribute id { "t:tbd03" },
        text { "The laws of logic have been abrogated?" }
      }

        else (: no point trying to run tests :)
            element tc:description {
              element tc:p {
                text { "Grammar test failed, "
                    || "test cases and nested "
                    || "test sets skipped." }
              }
            }
      )
    }

};



declare function t:run-test-case(
  $test-case as element(tc:test-case),
  $G as element(ixml)
) as element() {
  (: placeholder :)
  element tc:test-case-result {
    $test-case/@*,
    element tc:p {
      text { "Watch this space." }
    }
  }
};


